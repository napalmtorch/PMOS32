#pragma once
#include <Lib/Types.h>

namespace HAL
{
    enum class KeyPressed : uint8_t
    {
        INVALID,
        ESCAPE,
        D1,
        D2,
        D3,
        D4,
        D5,
        D6,
        D7,
        D8,
        D9,
        D0,
        MINUS,
        EQUAL,
        BACKSPACE,
        TAB,
        Q,
        W,
        E,
        R,
        T,
        Y,
        U,
        I,
        O,
        P,
        LBRACKET,
        RBRACKET,
        ENTER,
        LCTRL,
        A,
        S,
        D,
        F,
        G,
        H,
        J,
        K,
        L,
        COLON,
        QUOTE,
        BACKTICK,
        LSHIFT,
        BACKSLASH,
        Z,
        X,
        C,
        V,
        B,
        N,
        M,
        COMMA,
        PERIOD,
        SLASH,
        RSHIFT,
        KP_MULTIPLY,
        LALT,
        SPACE,
        CAPS_LOCK,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        NUM_LOCK,
        SCROLL_LOCK,
        KP_HOME,
        KP_UP,
        KP_PGUP,
        KP_MINUS,
        KP_LEFT,
        KP_D5,
        KP_RIGHT,
        KP_PLUS,
        KP_END,
        KP_DOWN,
        KP_PGDN,
        KP_PERIOD,
        F11 = 0x57,
        F12,
    };

    enum class KeyReleased : uint8_t
    {
        INVALID = 0x80,
        ESCAPE,
        D1,
        D2,
        D3,
        D4,
        D5,
        D6,
        D7,
        D8,
        D9,
        D0,
        MINUS,
        EQUAL,
        BACKSPACE,
        TAB,
        Q,
        W,
        E,
        R,
        T,
        Y,
        U,
        I,
        O,
        P,
        LBRACKET,
        RBRACKET,
        ENTER,
        LCTRL,
        A,
        S,
        D,
        F,
        G,
        H,
        J,
        K,
        L,
        COLON,
        QUOTE,
        BACKTICK,
        LSHIFT,
        BACKSLASH,
        Z,
        X,
        C,
        V,
        B,
        N,
        M,
        COMMA,
        PERIOD,
        SLASH,
        RSHIFT,
        KP_MULTIPLY,
        LALT,
        SPACE,
        CAPS_LOCK,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        NUM_LOCK,
        SCROLL_LOCK,
        KP_HOME,
        KP_UP,
        KP_PGUP,
        KP_MINUS,
        KP_LEFT,
        KP_D5,
        KP_RIGHT,
        KP_PLUS,
        KP_END,
        KP_DOWN,
        KP_PGDN,
        KP_PERIOD,
        F11 = 0xD7,
        F12,
    };

    enum class Key
    {
        Null,
        Escape,
        D1,
        D2,
        D3,
        D4,
        D5,
        D6,
        D7,
        D8,
        D9,
        D0,
        Minus,
        Equal,
        Backspace,
        Tab,
        Q,
        W,
        E,
        R,
        T,
        Y,
        U,
        I,
        O,
        P,
        LeftBracket,
        RightBracket,
        Enter,
        LeftCtrl,
        A,
        S,
        D,
        F,
        G,
        H,
        J,
        K,
        L,
        Colon,
        Quote,
        Backtick,
        LeftShift,
        Backslash,
        Z,
        X,
        C,
        V,
        B,
        N,
        M,
        Comma,
        Period,
        Slash,
        RightShift,
        Multiply,
        LeftAlt,
        Space,
        CapsLock,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        NumLock,
        ScrollLock,
        Home,
        UpArrow,
        PageUp,
        KeypadMinus,
        LeftArrow,
        Keypad5,
        RightArrow,
        Plus,
        End,
        DownArrow,
        PageDown,
        Delete,
        F11 = 0x57,
        F12,
    };

    // convert virtual key to scancode
    KeyPressed VirtualKeyToKSCDN(Key key);
    KeyReleased VirtualKeyToKSCUP(Key key);

    // convert scancode to virtual key
    Key KSCDNToVirtualKey(KeyPressed key);
    Key KSCUPToVirtualKey(KeyReleased key);
}